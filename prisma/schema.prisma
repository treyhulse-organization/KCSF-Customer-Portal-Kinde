// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Command to run: npx prisma migrate dev --name add_address_transactions



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}        

model User {
  id           String  @id @unique
  email        String
  firstName    String
  lastName     String
  profileImage String
  customerId   String? @unique

  createdAt DateTime @default(now())

  Subscription Subscription?
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}





// HERE IS WHERE I START TO BRANCH OFF

model Items {
  id                String   @id @default(uuid())
  org_id            String
  name              String
  description       String?
  sku               String
  type              String
  variations        Json?
  price             Decimal?
  global_identifier String?
  status            ItemStatus @default(DRAFT)
  metadata          Json?
  notes             String?
  unit_of_measure   String
  weight            Decimal?
  weight_unit       WeightUnit?
  length            Decimal?
  length_unit       DimensionUnit?
  width             Decimal?
  width_unit        DimensionUnit?
  depth             Decimal?
  depth_unit        DimensionUnit?
  tags              Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  front_image_url    String?
  back_image_url     String?
  images            Json?    // Will store an array of image URLs

  // Add this relation
  TransactionItems  TransactionItems[]

  @@unique([org_id, sku])
}

enum ItemStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum WeightUnit {
  OUNCE
  POUND
}

enum DimensionUnit {
  INCH
  CENTIMETER
  FOOT
}

model Customers {
  id                      String    @id @default(uuid())
  customer_id             String
  org_id                 String
  first_name             String?
  last_name              String?
  company_name           String?
  email                  String
  alt_email              String?
  phone                  String?
  alt_phone              String?
  account_rep            String?
  comments               String?
  last_order_date        DateTime?
  customer_category      String?
  notes                  String?   @db.Text
  default_shipping_address String?
  default_billing_address  String?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt

  // Relations
  addresses              Addresses[]
  shipping_address       Addresses? @relation("ShippingAddress", fields: [default_shipping_address], references: [address_id])
  billing_address        Addresses? @relation("BillingAddress", fields: [default_billing_address], references: [address_id])

  // Add this relation
  transactions     Transactions[]

  @@unique([org_id, customer_id])
}

model Addresses {
  id            String    @id @default(uuid())
  address_id    String    @unique @default(uuid())
  org_id        String
  customer_id   String
  easypost_id   String?
  name          String?
  company       String?
  street1       String
  street2       String?
  city          String
  state         String
  country       String
  zip           String
  verified      Boolean   @default(false)
  valid         AddressValidationStatus @default(PENDING)
  residential   Boolean?
  latitude      Float?
  longitude     Float?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  customer      Customers @relation(fields: [customer_id], references: [id])
  shipping_for  Customers[] @relation("ShippingAddress")
  billing_for   Customers[] @relation("BillingAddress")

  // Add this relation
  locations       Locations[]

  @@unique([org_id, address_id])
}

enum AddressValidationStatus {
  VALID
  INVALID
  PENDING
}

model Parcels {
  id String @id @default(uuid())
  org_id String
  name String
  description String
  length Decimal
  length_unit DimensionUnit
  width Decimal
  width_unit DimensionUnit
  depth Decimal
  depth_unit DimensionUnit
  weight Decimal
  weight_unit WeightUnit
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([org_id, id])
}

model Locations {
  id String @id @default(uuid())
  org_id String
  name String
  description String
  address_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  address Addresses @relation(fields: [address_id], references: [id])

  @@unique([org_id, id])
}

enum TransactionType {
  SALE
  QUOTE
  PURCHASE
  RETURN
  INVOICE
  SUBSCRIPTION
  CREDIT
  REFUND
  TRANSFER
  JOB
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  APPROVED
  COMPLETED
  CANCELED
}

model Transactions {
  id              String           @id @default(uuid())
  number          String           // Human readable ID
  org_id          String
  entity_id       String?          // Optional as not all transaction types need an entity
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  total           Decimal
  tax             Decimal?
  shipping        Decimal?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  // Relations
  items           TransactionItems[]
  customer        Customers?       @relation(fields: [entity_id], references: [id])

  @@unique([org_id, number])
}

model TransactionItems {
  id              String      @id @default(uuid())
  transaction_id  String
  item_id         String
  quantity        Int
  price_level     String?
  unit_price      Decimal
  discount        Decimal?
  total           Decimal

  // Relations
  transaction     Transactions @relation(fields: [transaction_id], references: [id])
  item           Items       @relation(fields: [item_id], references: [id])

  @@unique([transaction_id, item_id])
}









// HERE IS WHERE I STARTED TO BUILD STOREFRONT APPROVED

model Store {
  id             String   @id @default(uuid()) @map("store_id")
  org_id         String   @map("org_id")
  theme_id       String?  @map("theme_id")
  store_logo_url String?  @map("store_logo_url")
  slogan         String?
  name           String
  subdomain      String   @unique
  domain         String?
  timezone       String?
  metadata       Json?

  // Relations
  pages          Page[]
  theme          Theme?   @relation(fields: [theme_id], references: [id])
}

model Page {
  id       String @id @default(uuid()) @map("page_id")
  store_id String @map("store_id")
  org_id   String @map("org_id")
  name     String
  metadata Json?

  // Relations
  store    Store  @relation(fields: [store_id], references: [id])
}

model Component {
  id       String @id @default(uuid()) @map("component_id")
  org_id   String @map("org_id")
  name     String
  metadata Json?
}

model Theme {
  id       String   @id @default(uuid()) @map("theme_id")
  org_id   String   @map("org_id")
  name     String
  metadata Json?

  // Relations
  stores   Store[]
}

